plugins: ['build']

# Available default tasks. All tasks prefixed with '_' are considered 'private',
# i.e. they are not published in the command line help / list commands.
tasks:
    # Deploys a build
    deploy:
        set:
            target_env: ?
            build.version: ?vcs.current
            _mode: ? "build"
        help: |
            Deploys a build to the specified environment
        do:
            - ?(_mode == "build") @_sync.sync
            - ?(_mode == "patch") @patch

    # Simulates a deploy
    simulate:
        help: |
            Simulates a deploy of a build to the specified environment
        set:
            target_env: ?
            build.version: ?vcs.current
            simulate: true
        do: @_sync.simulate

    # Do a quick deploy based on a patch file rather than build and sync.
    qdeploy:
        help: |
            Do a quick deploy with patch in stead of build+sync

            Note build artifacts will not be patched, so only version-controlled files are patched and deployed.
        set:
            target_env: ?
            build.version: ?vcs.current
            _mode: '"patch"'
        do:
            - @deploy
            - echo "Remember to do a full deploy to avoid future version mismatches!"

    # Redeploys a build
    redeploy:
        set:
            target_env: ?
            build.version: env.versionat(target_env)
        help: |
            Redeploys the version that is installed on the specified environment.
        do: @deploy

    # Generate a patch for the difference between local a
    patch:
        help: |
            Quickly apply a patch to a remote installation without doing an entire sync.

            This only works for files within the versioning tree, not for external files or build artifacts.
            Patch does not update the installed version.
        set:
            target_env: ?
            build.version: ?vcs.current
            src.version: env.versionat(envs[target_env].ssh)
            _simulate: ? "no"
            _revert: ? "no"
            _patchfile: safename(sprintf("%s-%s.patch", src.version, build.version))
        do:
            - ?(verbose) echo "Applying patch for $(src.version) -> $(build.version)"
            - $(vcs.diff(src.version, build.version, 1)) > $(_patchfile)
            - scp $(_patchfile) $(envs[target_env].ssh):$(envs[target_env].root)/$(_patchfile)
            - |
                ssh $(envs[target_env].ssh) "                                \
                    cd $(envs[target_env].root);                             \
                    patch -r - -p0                              \
                        $(_simulate == "yes"    ? "--dry-run")  \
                        $(_revert == "yes"      ? "--reverse")  \
                        $(verbose               ? "--verbose")  \
                        < $(_patchfile);                        \
                    rm $(_patchfile)                            \
                "
            - rm $(_patchfile)

    # Simulate applying a patch.
    qsimulate:
        help: |
            Simulate patching a remote installation
        set:
            target_env: ?
            build.version: ?vcs.current
            src.version: env.versionat(envs[target_env].ssh)
            _simulate: '"yes"'
        do: @patch

    # Revert the patch
    unpatch:
        help: |
            Revert a previously applied patch.
        set:
            target_env: ?
            build.version: ?vcs.current
            src.version: env.versionat(envs[target_env].ssh)
            _revert: '"yes"'
        do: @patch
